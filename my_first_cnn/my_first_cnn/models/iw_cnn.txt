import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from sklearn.model_selection import train_test_split
from utils import load_galaxy_data

import app


input_data, labels = load_galaxy_data()
X = input_data
y = labels

print("The Input Data:", input_data.shape, "The Labels:", labels.shape)

# Split into train and temp sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=222, stratify=y)

# Further split the temp set into test and validation sets
X_test, X_valid, y_test, y_valid = train_test_split(X_temp, y_temp, test_size=0.5, random_state=222, stratify=y_temp)

data_generator = ImageDataGenerator(rescale=1./255)

training_iterator = data_generator.flow(X_train, y_train,batch_size=5)
validation_iterator = data_generator.flow(X_valid, y_valid, batch_size=5)


model = tf.keras.Sequential()
model.add(tf.keras.Input(shape=(128, 128, 3)))
model.add(tf.keras.layers.Dense(4,activation="softmax"))


model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    loss=tf.keras.losses.CategoricalCrossentropy(),
    metrics=[tf.keras.metrics.CategoricalAccuracy(),tf.keras.metrics.AUC()])


model = tf.keras.Sequential()
model.add(tf.keras.Input(shape=(128, 128, 3)))
model.add(tf.keras.layers.Conv2D(8, 3, strides=2, activation="relu")) 
model.add(tf.keras.layers.MaxPooling2D(
    pool_size=(2, 2), strides=(2,2)))
model.add(tf.keras.layers.Conv2D(8, 3, strides=2, activation="relu")) 
model.add(tf.keras.layers.MaxPooling2D(
    pool_size=(2,2), strides=(2,2)))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(16, activation="relu"))
model.add(tf.keras.layers.Dense(4, activation="softmax"))

model.summary()
model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(
        training_iterator,
        steps_per_epoch=len(X_train)/5,
        epochs=8,
        validation_data=validation_iterator,
        validation_steps=len(X_valid)/5)